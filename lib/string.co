String(size = UInt(0), data = nil) << Array(:size = size, :data = data, :type = Char) {
  scan(pattern = :string) = {
    matching = false
    pattern_position = 0
    each() do |element|
      if element.value == pattern.at(pattern_position)
        matching = true
        pattern_position += 1
        if pattern_position == pattern.size
          yield
          matching = false
          pattern_position = 0
        end
      elsif matching
        matching = false
        pattern_position = 0
      end
    end
    
    before() {
      return sub(:length = element.position - 1)
    }
    
    after() {
      return sub(:start = scanner.position, :length = size - scanner.position)
    }
  }
  
  gsub(pattern = :string, replacement = :string) {
    result = String()
    scan(pattern) do |scanner|
      result
    end
  }
  
  split(delimitter = ' ') {
    
  }
  
  hash() {
    return 
  }
  
  print() {
    len = size * type.size
    ASM(:i386) do
      push dword len            ; message length                           
      push dword data           ; message to write
      push dword 1              ; file descriptor value (stdout?)
    
      ; 1b make the system call to write
      mov eax, 0x4              ; system call number for write
      sub esp, 4                ; OS X (and BSD) system calls needs "extra space" on stack
      int 0x80                  ; make the actual system call
    
      ; 1c clean up the stack
      add esp, 16
    end
  }
  
  sub(start = 0, length = size) {
    # ? lenth > size - start
    return SubString(:size = length, :type = type, :data = data.pointer(:offset = start * type.size))
  }
  
)


SubArray(size = :UInt, data = :Pointer, <type> = :Type) < Array(:size = size, :type = type, :type = <type>) {
  free() = {} # same as undef
}

