# [1,2,3]
# Array(:type = :int)
# Array(:size = 100, :type = :float)


Array(size = UInt(0), type = :Type, data = nil) &= {
  data ||= Pointer(:size = size * type.size)
  
  at(index = :UInt) = {
    return type(data[index*type.size])
  }
  
  set(index = :UInt, value = :&type) = {
    data.set(:index = index*type.size, :value = value)
  }
  
  each(start = 0) = {
    (size - start).times() do |iterator|
      index = iterator.position + start
      value = self.at(:index = index)
      yield
    end
  }
  
  map(map_type = :Type) = {
    array = Array(:type = type, :size = size)
    size.each() do |iterator|
      index @= iterator.index
      array.at(:index = index) = yield
    end
    return array
  }
  collect() @= map()
  
  copy(start = 0, length = size) = {
    mem_size = length * type.size
    data_copy = Pointer(:size = mem_size)
    data.copy(:destination = data_copy, :size = mem_size, :offset = start * type.size)
    return Array(:size = length, :type = type, :data = data_copy)
  }
  
  append(array = :Array) = {
    new_size = size + array.size
    mem_size = new_size * type.size
    new_data = Pointer(:size = mem_size)
    data.copy(:destination = new_data, :size = size)
    array.data.copy(:destination = new_data.pointer(:offset = size * type.size), :size = size)
    data.free(:size = size)
    data = new_data
    size = new_size
    return self
  }
  
  sub(start = 0, length = size) = {
    # ? lenth > size - start
    return SubArray(:size = length, :type = type, :data = data.pointer(:offset = start * type.size))
  }
  
  reverse() = {
    (size / 2).times() do |iterator|
      swap_char = at(:index = iterator.position)
      swap_position = size - iterator.position
      set(:position = iterator.position, :value = at(:position = swap_position))
      set(:position = swap_position, :value = swap_char)
    end
  }
  sort() = {
    times() do |iterator|
      a
      yield
    end
  }
  
  free() = {
    data.free(:size = size)
  }
  
}

# SubArray does not manage its own memory. This forces all arguments to be required
SubArray(size = :UInt, type = :Type, data = :Pointer) @= Array(:size = size, :type = type, :data = data)

SubArray() &= {
  free() = {} # same as undef
}
